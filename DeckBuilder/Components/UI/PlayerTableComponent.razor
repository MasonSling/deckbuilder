@using DeckBuilder.Models
<div class="card p-3">
    @if (Players.Any())
    {
        <h5 class="mb-3">Player Stats Overview</h5>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Player</th>
                    <th>Health</th>
                    <th>ABV</th>
                    <th>Hype</th>
                    <th>Conditions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in Players)
                {
                    <tr class="@(player.Name == CurrentPlayer?.Name ? "table-primary" : "")">
                        <td>@player.Name</td>
                        <td>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-secondary btn-sm me-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.Health), -1)">
                                    <i class="bi bi-dash"></i>
                                </button>
                                <span>@player.Stats.Health</span>
                                <button class="btn btn-outline-secondary btn-sm ms-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.Health), 1)">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-secondary btn-sm me-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.ABV), -1)">
                                    <i class="bi bi-dash"></i>
                                </button>
                                <span>@player.Stats.ABV</span>
                                <button class="btn btn-outline-secondary btn-sm ms-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.ABV), 1)">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-secondary btn-sm me-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.Hype), -1)">
                                    <i class="bi bi-dash"></i>
                                </button>
                                <span>@player.Stats.Hype</span>
                                <button class="btn btn-outline-secondary btn-sm ms-1"
                                        @onclick="() => AdjustStat(player, nameof(player.Stats.Hype), 1)">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </td>
                        <td>
                            <div class="d-flex flex-wrap gap-2">
                                <span class="badge @GetConditionClass(player.Stats.Headache)"
                                      @onclick="() => ToggleCondition(player, nameof(player.Stats.Headache))">
                                    Headache
                                </span>
                                <span class="badge @GetConditionClass(player.Stats.Anxiety)"
                                      @onclick="() => ToggleCondition(player, nameof(player.Stats.Anxiety))">
                                    Anxiety
                                </span>
                                <span class="badge @GetConditionClass(player.Stats.Sickened)"
                                      @onclick="() => ToggleCondition(player, nameof(player.Stats.Sickened))">
                                    Sickened
                                </span>
                                <span class="badge @GetConditionClass(player.Stats.Blessed)"
                                      @onclick="() => ToggleCondition(player, nameof(player.Stats.Blessed))">
                                    Blessed
                                </span>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [Parameter]
    public List<PlayerModel> Players { get; set; } = new();
    [Parameter]
    public PlayerModel? CurrentPlayer { get; set; } // Active player

    private void AdjustStat(PlayerModel player, string statName, int delta)
    {
        var property = typeof(StatsModel).GetProperty(statName);
        if (property != null)
        {
            int currentValue = (int)property.GetValue(player.Stats);
            property.SetValue(player.Stats, currentValue + delta);
        }
    }

    private void ToggleCondition(PlayerModel player, string condition)
    {
        var property = typeof(StatsModel).GetProperty(condition);
        if (property != null)
        {
            var currentValue = (bool)property.GetValue(player.Stats);
            property.SetValue(player.Stats, !currentValue);
        }
    }

    private string GetConditionClass(bool isActive)
    {
        return isActive ? "bg-success text-white" : "text-muted";
    }
}
