@using DeckBuilder.Models
<div>
    <h5>Discard Pile</h5>
    @if (Cards.Any())
    {
        <div class="mb-3">
            <p>Cards in Discard Pile: @Cards.Count</p>
            <button class="btn btn-secondary" @onclick="ToggleDiscardView">@(IsDiscardVisible ? "Hide Discard" : "View Discard")</button>
        </div>

        @if(IsDiscardVisible){
        <ul class="list-group">
            @foreach (var card in Cards)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@card.Name</strong> - Cost: @card.Cost, Type: @card.Type, Text: @card.Text
                    </div>
                    <button class="btn btn-warning btn-sm" @onclick="() => DrawCard(card)">Draw</button>
                </li>
            }
        </ul>
        }
    }
</div>

@code {
    [Parameter]
    public List<CardModel> Cards { get; set; } = new();

    [Parameter]
    public EventCallback<CardModel> OnDraw { get; set; }

    private bool IsDiscardVisible = false;

    private async Task DrawCard(CardModel card)
    {
        if (OnDraw.HasDelegate)
        {
            await OnDraw.InvokeAsync(card);
        }
    }
    private void ToggleDiscardView()
    {
        IsDiscardVisible = !IsDiscardVisible;
    }
}
