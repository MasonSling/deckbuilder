@using DeckBuilder.Models
<div>
    <h5>Hand</h5>
    @if (Cards.Any())
    {
        <div class="row">
            @foreach (var card in Cards)
            {
                <div class="col card-container mb-3">
                    <div class="card shadow-lg" style="background-color: #eaf0f6; border: 1px solid #cfd9e6; border-radius: 8px;">
                        <div class="card-body position-relative">
                            <h5 class="card-title d-flex justify-content-between text-truncate" style="max-width: 100%;">
                                <span class="text-truncate" style="max-width: calc(100% - 3rem);">@card.Name</span>
                                <span class="badge rounded-circle" style="background-color: #95c4ce; color: white; padding: 0.4em 0.6em;">
                                    @card.Cost
                                </span>
                            </h5>
                            <p class="card-text fst-italic text-muted text-truncate">@card.Type</p>
                            <p class="card-text text-truncate" style="max-width: 100%;">@card.Text</p>
                            <div class="mt-3 d-flex justify-content-between">
                                <button class="btn btn-sm play-discard-btn text-truncate" @onclick="() => DiscardCard(card)">
                                    Play
                                </button>
                                <button class="btn btn-sm move-to-board-btn text-truncate" @onclick="() => PlayCard(card)">
                                    Move
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>
    }
    else
    {
        <p>No cards in hand.</p>
    }
</div>

<style>
    .card-container {
        flex: 0 0 calc(20% - 1rem); /* 5 cards per row with spacing */
        max-width: calc(20% - 1rem);
        margin-right: 0.5rem;
        margin-left: 0.5rem;
    }

    .row {
        justify-content: center; /* Center the cards if fewer than 5 */
    }

    .play-discard-btn {
        background-color: #7d92aa; /* Soft muted blue-gray */
        color: white;
        font-size: 0.8rem;
        padding: 0.3rem 0.5rem;
        border-radius: 4px;
    }

    .move-to-board-btn {
        background-color: #8aaf84; /* Muted green */
        color: white;
        font-size: 0.8rem;
        padding: 0.3rem 0.5rem;
        border-radius: 4px;
    }

        .play-discard-btn:hover, .move-to-board-btn:hover {
            opacity: 0.85;
        }
</style>

@code {
    [Parameter]
    public List<CardModel> Cards { get; set; } = new();

    [Parameter]
    public EventCallback<CardModel> OnDiscard { get; set; }

    [Parameter]
    public EventCallback<CardModel> OnPlay { get; set; }

    private async Task DiscardCard(CardModel card)
    {
        if (OnDiscard.HasDelegate)
        {
            await OnDiscard.InvokeAsync(card);
        }
    }

    private async Task PlayCard(CardModel card)
    {
        if (OnPlay.HasDelegate)
        {
            await OnPlay.InvokeAsync(card);
        }
    }
}
