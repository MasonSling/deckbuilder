@using DeckBuilder.Models
<div class="card p-3">
    <h5>Enemy Deck</h5>

    <!-- CSV Uploader -->
    @if (!DeckLoaded)
    {
        <div class="mb-3">
            <h6>Upload Monster CSV</h6>
            <InputFile OnChange="HandleFileUpload" accept=".csv" />
        </div>
    }

    <!-- Drawn Cards -->
    @if (DrawnMonsters.Any())
    {
        <h6>Drawn Monsters</h6>
        <div class="row">
            @foreach (var monster in DrawnMonsters)
            {
                <div class="col-4 card-container mb-3">
                    <div class="card shadow-lg position-relative" style="background-color: #fde7e8; border: 1px solid #f5c2c4; border-radius: 8px;">
                        <div class="card-body">
                            <div class="position-absolute top-0 end-0 p-1">
                                <span class="badge bg-white text-dark rounded-circle shadow"
                                      style="cursor: pointer; padding: 0.5em;"
                                      @onclick="() => IncrementMonsterBadge(monster)">
                                    @monster.Count
                                </span>
                            </div>
                            <h5 class="card-title">@monster.Name</h5>
                            <p class="card-text">@monster.Text</p>
                            <button class="btn btn-danger btn-sm position-absolute bottom-0 end-0 m-2" title="Remove Monster" @onclick="() => RemoveMonster(monster)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No monsters drawn yet.</p>
    }

    <!-- Draw Monster Button -->
    @if (EnemyDeck.Any())
    {
        <button class="btn btn-danger mt-3" @onclick="DrawMonster">Draw Monster</button>
    }
    else if (DeckLoaded)
    {
        <p>The enemy deck is empty.</p>
    }
</div>

@code {
    private List<MonsterModel> EnemyDeck { get; set; } = new();
    private List<MonsterModel> DrawnMonsters { get; set; } = new();
    private bool DeckLoaded { get; set; } = false;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;

            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1 MB limit
            using var reader = new StreamReader(stream);

            while (true)
            {
                var line = await reader.ReadLineAsync();
                if (line == null) break;

                if (!string.IsNullOrWhiteSpace(line))
                {
                    var parts = line.Split(',');
                    if (parts.Length == 3 && int.TryParse(parts[2], out int copies))
                    {
                        for (int i = 0; i < copies; i++)
                        {
                            EnemyDeck.Add(new MonsterModel
                                {
                                    Name = parts[0].Trim(),
                                    Text = parts[1].Trim()
                                });
                        }
                    }
                }
            }

            DeckLoaded = true;

            // Shuffle the deck
            var random = new Random();
            EnemyDeck = EnemyDeck.OrderBy(_ => random.Next()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private void DrawMonster()
    {
        if (EnemyDeck.Any())
        {
            var monster = EnemyDeck.First();
            monster.Count = 0; // Initialize the counter when the monster is drawn
            EnemyDeck.Remove(monster);
            DrawnMonsters.Add(monster);
        }
    }

    private void RemoveMonster(MonsterModel monster)
    {
        EnemyDeck.Add(monster);
        DrawnMonsters.Remove(monster);
    }

    private void IncrementMonsterBadge(MonsterModel monster)
    {
        monster.Count++;
    }
}
